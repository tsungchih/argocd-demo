## Argocd Configuration Section.
## docs: https://argo-cd.readthedocs.io/en/stable/
## ref: https://raw.githubusercontent.com/argoproj/argo-helm/master/charts/argo-cd/values.yaml
##
argo-cd:
  installCRDs: true
  global:
    repository: quay.io/argoproj/argocd
    tag: "v2.2.5"
    imagePullPolicy: IfNotPresent

  controller:
    # -- Deploy the application controller as a StatefulSet instead of a Deployment, this is required for HA capability.
    # This is a feature flag that will become the default in chart version 3.x
    #enableStatefulSet: true
    # -- Application controller log format. Either `text` or `json`
    logFormat: text
    # -- Application controller log level
    logLevel: info

  ## Deploy the Redis with HA support, this is required for HA capability.
  #redis-ha:
  #  enabled: true

  ## Deploy the RepoServer with HA support, this is required for HA capability.
  #repoServer:
  #  autoscaling:
  #    enabled: true
  #    minReplicas: 2

  configs:
    # -- Repositories list to be used by applications
    ## Creates a secret for each key/value specified below to create repositories
    ## Note: the last example in the list would use a repository credential template, configured under "configs.repositoryCredentials".
    repositories:
      # istio-helm-repo:
      #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
      #   name: istio.io
      #   type: helm
      # private-helm-repo:
      #   url: https://my-private-chart-repo.internal
      #   name: private-repo
      #   type: helm
      #   password: my-password
      #   username: my-username
      # private-repo:
      #   url: https://github.com/argoproj/private-repo
      argocd-demo:
        name: argocd-demo
        type: git
        url: https://github.com/tsungchih/argocd-demo.git
      argocd-helm:
        name: argocd-helm
        type: helm
        url: https://argoproj.github.io/argo-helm

  ## Server
  server:
    ## To deploy Argo CD with HA support, we have to uncomment one of the 
    ## following configuration section depending on whether autoscaling 
    ## feature is concerned.
    ## HA mode with autoscaling
    #autoscaling:
    #  enabled: true
    #  minReplicas: 2
    ## HA mode without autoscaling
    #replicas: 2
    #env:
    #  - name: ARGOCD_API_SERVER_REPLICAS
    #    value: '2'

    configEnabled: true
    ## The config section is used to generate ConfigMap: argocd-cm
    ## ref: https://raw.githubusercontent.com/argoproj/argo-cd/master/docs/operator-manual/argocd-cm.yaml
    #
    config:
      # Argo CD's externally facing base URL (optional). Required when configuring SSO
      url: https://argocd.cloudlytics.tk
      # Argo CD instance label key
      application.instanceLabelKey: argocd.argoproj.io/instance
      accounts.image-updater: apiKey
      accounts.guest: apiKey, login
      ## The following configuration shows the way to integrate Dex for implementing SSO with GitLab.
      ## ref: https://dexidp.io/docs/connectors/gitlab/
      #
      dex.config: |
        connectors:
          - type: gitlab
            id: gitlab
            name: "GitLab"
            config:
              baseURL: https://gitlab.bigdatainn-prd.site
              clientID: 6794b7dd337eff52c580a5d0d2712ab96701854ec68eb2f933cbf6bf0d13cc18
              clientSecret: 61efb3a7bfbf5ff2117c7ddad201f654513f97c3c02d88eff245c81ee2fc488c

    # -- ArgoCD rbac config ([ArgoCD RBAC policy])
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
    rbacConfig:
      policy.default: role:readonly
      policy.csv: |
        p, role:sysadmin, applications, *, */*, allow
        p, role:sysadmin, clusters, get, *, allow
        p, role:sysadmin, repositories, get, *, allow
        p, role:sysadmin, repositories, create, *, allow
        p, role:sysadmin, repositories, update, *, allow
        p, role:sysadmin, repositories, delete, *, allow
        p, role:image-updater, applications, get, */*, allow
        p, role:image-updater, applications, update, */*, allow
        g, image-updater, role:image-updater
        g, guest, role:readonly

    # -- Deploy ArgoCD Applications within this helm release
    # @default -- `[]` (See [values.yaml])
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
    additionalApplications: 
      - name: argocd
        namespace: argocd
        destination:
          namespace: argocd
          server: https://kubernetes.default.svc
        project: argocd
        source:
          helm:
            version: v3
            valueFiles:
            - values-non-ha.yaml
          path: helm/argo-cd
          repoURL: https://github.com/tsungchih/argocd-demo.git
          targetRevision: HEAD
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
            allowEmpty: false
          syncOptions:
          - Validate=true
          - CreateNamespace=true
          - PrunePropagationPolicy=foreground
          - PruneLast=true
      - name: argocd-appprojects
        namespace: argocd
        destination:
          namespace: argocd
          server: https://kubernetes.default.svc
        project: argocd
        source:
          path: projects
          repoURL: https://github.com/tsungchih/argocd-demo.git
          targetRevision: HEAD
          directory:
            recurse: true
            jsonnet: {}
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
            allowEmpty: false
          syncOptions:
          - Validate=true
          - CreateNamespace=true
          - PrunePropagationPolicy=foreground
          - PruneLast=true
      - name: argocd-applications
        namespace: argocd
        destination:
          namespace: argocd
          server: https://kubernetes.default.svc
        project: argocd
        source:
          path: applications
          repoURL: https://github.com/tsungchih/argocd-demo.git
          targetRevision: HEAD
          directory:
            recurse: true
            jsonnet: {}
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
            allowEmpty: false
          syncOptions:
          - Validate=true
          - CreateNamespace=true
          - PrunePropagationPolicy=foreground
          - PruneLast=true

    # -- Deploy ArgoCD Projects within this helm release
    # @default -- `[]` (See [values.yaml])
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
    additionalProjects: 
    - name: argocd
      namespace: argocd
      additionalLabels: {}
      additionalAnnotations: {}
      description: Argocd Project
      sourceRepos:
      - '*'
      destinations:
      - namespace: argocd
        server: https://kubernetes.default.svc
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
      orphanedResources:
        warn: false

    GKEbackendConfig:
      # -- Enable BackendConfig custom resource for Google Kubernetes Engine
      enabled: false
      # -- [BackendConfigSpec]
      spec:
        # healthCheck:
        #   checkIntervalSec: 30
        #   timeoutSec: 5
        #   healthyThreshold: 1
        #   unhealthyThreshold: 2
        #   type: HTTP
        #   requestPath: /healthz
        #   port: 8080

    ## Create a Google Managed Certificate for use with the GKE Ingress Controller
    ## https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs
    GKEmanagedCertificate:
      # -- Enable ManagedCertificate custom resource for Google Kubernetes Engine.
      enabled: false
      # -- Domains for the Google Managed Certificate
      domains:
      - argocd.example.com

    ## Create a Google FrontendConfig Custom Resource, for use with the GKE Ingress Controller
    ## https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
    GKEfrontendConfig:
      # -- Enable FrontConfig custom resource for Google Kubernetes Engine
      enabled: false
      # -- [FrontendConfigSpec]
      spec:
    # spec:
    #   redirectToHttps:
    #     enabled: true
    #     responseCodeName: RESPONSE_CODE
        redirectToHttps:
          enabled: true

    ingress:
      # -- Enable an ingress resource for the Argo CD server
      enabled: true
      # -- Additional ingress annotations
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # -- Additional ingress labels
      labels: {}
      # -- Defines which ingress controller will implement the resource
      ingressClassName: ""

      # -- List of ingress hosts
      ## Argo Ingress.
      ## Hostnames must be provided if Ingress is enabled.
      ## Secrets must be manually created in the namespace
      hosts:
        # []
        - argocd.cloudlytics.tk

      # -- List of ingress paths
      paths:
        - /
      # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
      pathType: Prefix
      # -- Additional ingress paths
      extraPaths:
        []
        # - path: /*
        #   backend:
        #     serviceName: ssl-redirect
        #     servicePort: use-annotation
        ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
        # - path: /*
        #   pathType: Prefix
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation

      # -- Ingress TLS configuration
      tls:
        - secretName: argocd-secret
          hosts:
            - argocd.cloudlytics.tk

        # - secretName: argocd-tls-certificate

      # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
      https: true

## Argocd Rollouts Configuration Section.
## docs: https://argoproj.github.io/argo-rollouts/
## ref: https://raw.githubusercontent.com/argoproj/argo-helm/master/charts/argo-rollouts/values.yaml
##
argo-rollouts:
  dashboard:
    # -- Deploy dashboard server
    enabled: false

    ## Ingress configuration.
    ## ref: https://kubernetes.io/docs/user-guide/ingress/
    ##
    ingress:
      # -- Enable dashboard ingress support
      enabled: false
      # -- Dashboard ingress annotations
      annotations: {}
      # -- Dashboard ingress labels
      labels: {}
      # -- Dashboard ingress class name
      ingressClassName: ""

      # -- Dashboard ingress hosts
      ## Argo Rollouts Dashboard Ingress.
      ## Hostnames must be provided if Ingress is enabled.
      ## Secrets must be manually created in the namespace
      hosts: []
        # - argorollouts.example.com

      # -- Dashboard ingress paths
      paths:
        - /
      # -- Dashboard ingress path type
      pathType: Prefix
      # -- Dashboard ingress extra paths
      extraPaths: []
        # - path: /*
        #   backend:
        #     serviceName: ssl-redirect
        #     servicePort: use-annotation
        ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
        # - path: /*
        #   pathType: Prefix
        #   backend:
        #     service
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation

      # -- Dashboard ingress tls
      tls: []
        # - secretName: argorollouts-example-tls
        #   hosts:
        #     - argorollouts.example.com

## Argocd Image Updater Configuration Section.
## docs: https://argocd-image-updater.readthedocs.io/en/stable/
## ref: https://raw.githubusercontent.com/argoproj/argo-helm/master/charts/argocd-image-updater/values.yaml
##
argocd-image-updater:
  config:
    # -- API kind that is used to manage Argo CD applications (`kubernetes` or `argocd`)
    applicationsAPIKind: ""

    # Described in detail here https://argocd-image-updater.readthedocs.io/en/stable/install/running/#flags
    argocd:
      # -- Use the gRPC-web protocol to connect to the Argo CD API
      grpcWeb: true
      # -- Connect to the Argo CD API server at server address
      serverAddress: ""
      # -- If specified, the certificate of the Argo CD API server is not verified.
      insecure: false
      # -- If specified, use an unencrypted HTTP connection to the ArgoCD API instead of TLS.
      plaintext: false
    # -- ArgoCD Image Updater registries list configuration. More information [here](https://argocd-image-updater.readthedocs.io/en/stable/configuration/registries/)
    registries:
      - name: Docker Hub
        api_url: https://registry-1.docker.io
        ping: yes
        defaultns: library
      - name: Google Container Registry
        api_url: https://gcr.io
        prefix: gcr.io
        ping: no
      - name: RedHat Quay
        api_url: https://quay.io
        ping: no
        prefix: quay.io
      - name: GitHub Container Registry
        api_url: https://gcr.io
        ping: no
        prefix: gcr.io

## Argocd Notifications Configuration Section.
## docs: https://argocd-notifications.readthedocs.io/en/stable/
## ref: https://raw.githubusercontent.com/argoproj/argo-helm/master/charts/argocd-notifications/values.yaml
##
argocd-notifications:
  # -- The deployment strategy to use to replace existing pods with new ones
  updateStrategy:
    type: Recreate

  secret:
    # -- Whether helm chart creates controller secret
    create: false

  # -- Set the logging level. (One of: `debug`, `info`, `warn`, `error`)
  logLevel: info

  # -- Configures notification services
  # @default -- See [values.yaml]
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/
  notifiers:
    service.email.gmail: |
      username: $gmail-noreply-username
      password: $gmail-noreply-password
      host: smtp.gmail.com
      port: 465
      from: $gmail-noreply-publicname

  # -- Define user-defined context
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/#defining-user-defined-context
  context: {}
    # region: east
    # environmentName: staging

  # -- Contains centrally managed global application subscriptions
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/
  subscriptions:
    # subscription for on-created and on-deleted trigger notifications
    - recipients:
      - email.gmail:sre.dept@cloudlytics.me
      triggers:
      - on-created
      - on-deleted

  # -- The notification template is used to generate the notification content
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
  templates:
    template.app-created: |
      email.gmail:
        subject: Application {{.app.metadata.name}} has been created.
      message: |
        {{if eq .serviceType "email.gmail"}}:grin:{{end}} Application {{.app.metadata.name}} has been created.
    template.app-deleted: |
      email.gmail:
        subject: Application {{.app.metadata.name}} has been deleted.
      message: |
        Application {{.app.metadata.name}} has been deleted.
    template.app-deployed: |
      email.gmail:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]

  # -- The trigger defines the condition when the notification should be sent
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
  triggers:
    trigger.on-created: |
      - when: app.status.operationState.phase in ['Succeeded']
        send:
        - app-created
        description: A brand new Application is created.
    trigger.on-deleted: |
      - when: app.metadata.deletionTimestamp != nil
        send:
        - app-deleted
        oncePer: app.metadata.name
        description: An Application is deleted.
    trigger.on-deployed: |
      - when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
        send: [app-deployed]
        oncePer: app.status.sync.revision
        description: Application is synced and healthy. Triggered once per commit.
    #
    # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/#default-triggers
    # defaultTriggers: |
    #   - on-sync-status-unknown

